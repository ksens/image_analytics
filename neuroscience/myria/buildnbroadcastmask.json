{
   "logicalRa":"Store(public:adhoc:results)[Apply(_COLUMN0_=LOG($0))[GroupBy(; UDA((_sum__128 / _count__127)))[Apply(link=$1)[Select(((((($1 = 1) or ($1 = 2)) or ($1 = 3)) or ($1 = 4)) or ($1 = 5)))[Scan(public:adhoc:TwitterK)]]]]]",
   "fragments":[
        {"operators": [
            {
        "argOperatorId": 7,
        "opName": "receive",
        "opId": 8,
        "opType": "BroadcastConsumer"
        },
            {
                "argChild": 8,
                "argOverwriteTable": true,
                "opName": "Insert",
                "opId": 9,
                "opType": "DbInsert",
                "relationKey": {
                    "programName": "adhoc",
                    "relationName": "bmask",
                    "userName": "public"
                }
            }
        ]
        },


        { "operators":[

           {
              "opType":"LocalMultiwayConsumer",
              "opName":"MyriaSplitConsumer",
              "argOperatorId":4,
              "opId":5
           },
            {
               "opName":"MyriaApply(_COLUMN0_=LOG($0))",
               "emitExpressions":[
                  {
                     "outputName":"mask",
                     "rootExpressionOperator":{
                        "type":"PYUDF",
                        "name":"medianO",
                        "children": [
                          {
                            "type":"VARIABLE",
                            "columnIdx":0
                          },
                          {
                            "type":"VARIABLE",
                            "columnIdx":1
                          }
                        ]

                     }
                  },
                  {
                     "outputName":"subjid",
                     "rootExpressionOperator":{
                        "type":"VARIABLE",
                        "columnIdx":0
                     }
                  }
               ],
               "opType":"Apply",
               "argChild":5,
               "opId":6
            },

            {
              "argChild": 6,
              "opName": "broadcast",
              "opId": 7,
              "opType": "BroadcastProducer"
            }
         ]
      },
      {
                 "operators":[
                    {
                       "opType":"ShuffleConsumer",
                       "opName":"MyriaShuffleConsumer",
                       "argOperatorId":1,
                       "opId":2
                    },
                    {
                       "opName":"MyriaGroupBy(a; UDA((_sum__262 / _count__261)))",
                       "aggregators":[
                          {
                             "updaters":[
                                {
                                   "rootExpressionOperator":{
                                      "left":{
                                         "columnIdx":0,
                                         "type":"STATE"
                                      },
                                      "right":{
                                         "value":"1",
                                         "valueType":"LONG_TYPE",
                                         "type":"CONSTANT"
                                      },
                                      "type":"PLUS"
                                   },
                                   "outputName":"_count__261"
                                },
                                {
                                   "rootExpressionOperator":{

                                     "children": [
                                       {
                                         "columnIdx":1,
                                         "type":"STATE"
                                       },
                                       {
                                         "columnIdx":2,
                                         "type":"VARIABLE"
                                       }
                                     ],
                                      "type": "PYUDF",
                                      "outputType":"BYTES_TYPE",
                                      "name": "add"
                                   },
                                   "outputName":"_sum__262"
                                }
                             ],
                             "emitters":[
                                {
                                   "rootExpressionOperator":{
                                     "children": [
                                       {
                                         "columnIdx":1,
                                         "type":"STATE"
                                       },
                                       {
                                         "columnIdx":0,
                                         "type":"STATE"
                                       }
                                     ],

                                      "type": "PYUDF",
                                      "outputType":"BYTES_TYPE",
                                      "name": "mean"
                                   },
                                   "outputName":"mask"
                                }
                             ],
                             "initializers":[
                                {
                                   "rootExpressionOperator":{
                                      "value":"0",
                                      "valueType":"LONG_TYPE",
                                      "type":"CONSTANT"
                                   },
                                   "outputName":"_count__261"
                                },
                                {
                                   "rootExpressionOperator":{
                                      "value":"null",
                                      "valueType":"BYTES_TYPE",
                                      "type":"CONSTANT"
                                   },
                                   "outputName":"_sum__262"
                                }
                             ],
                             "type":"UserDefined"
                          }
                       ],
                       "argChild":2,
                       "argGroupField":1,
                       "opType":"SingleGroupByAggregate",
                       "opId":3
                    },
                    {
                       "opType":"LocalMultiwayProducer",
                       "argChild":3,
                       "opId":4,
                       "opName":"MyriaSplitProducer"
                    }
                 ]},

      {
         "operators":[
            {
               "sql":"SELECT  input.imgid, input.subjid, input.image FROM (SELECT \"public:adhoc:raw\".image AS image,\"public:adhoc:raw\".subjid AS subjid, \"public:adhoc:raw\".imgid AS imgid FROM \"public:adhoc:raw\") AS input WHERE input.imgid in (0,16,32,48,64,80,95,112,128,144,160,176,191,208,224,240,256,272)",
               "opName":"op name Select *  from raw table",
               "opType":"DbQueryScan",
               "opId":0,
               "schema":{
                  "columnTypes":[
                     "LONG_TYPE",
                     "LONG_TYPE",
                     "BYTES_TYPE"
                  ],
                  "columnNames":[
                     "subjid",
                     "imgid",
                     "image"
                  ]
               }
            },
            {
               "opType":"ShuffleProducer",
               "argChild":0,
               "argPf":{
                  "index":1,
                  "type":"SingleFieldHash"
               },
               "opId":1,
               "opName":"MyriaShuffleProducer(h($0))"
            }
          ]}
   ],
   "rawQuery":"uda Foo(x){\n[0 as _count,0 as _sum];\n[_count+1,  _sum+x];\n[_sum/_count ];\n};\n\n\nT1 = scan(TwitterK);\ninter = [from T1\n          where T1.$1 = 1 or T1.$1 = 2 or T1.$1 =3 or T1.$1=4 or T1.$1 =5\n          emit T1.$0 as src, T1.$1 as link ];\n\nT2 = [from inter emit Foo(link) as res];\nT3 = [from T2 emit Log(res)];\nstore(T3, results);",
   "language":"myrial"
}
